// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos base para Better-Auth (User, Session, Account, Verification)
// + Extensiones para la app: Role y Movement

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?   @map("nombre")
  email         String    @unique @map("correo")
  emailVerified DateTime? @map("correo_verificado")
  image         String?   @map("imagen")
  createdAt     DateTime  @default(now()) @map("creado_en")
  updatedAt     DateTime  @updatedAt @map("actualizado_en")

  // Relaciones auth
  sessions      Session[]
  accounts      Account[]

  // RBAC
  role          Role      @default(ADMIN) @map("rol")

  // Relaciones negocio
  movements     Movement[]

  @@map("usuario")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("token")
  userId       String   @map("usuario_id")
  expires      DateTime @map("expira_en")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sesion")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("usuario_id")
  type              String
  provider          String  @map("proveedor")
  providerAccountId String  @map("cuenta_id_proveedor")
  refresh_token     String? @map("token_refresco") @db.Text
  access_token      String? @map("token_acceso") @db.Text
  expires_at        Int?    @map("expira_en")
  token_type        String? @map("tipo_token")
  scope             String? @map("alcance")
  id_token          String? @map("token_id") @db.Text
  session_state     String? @map("estado_sesion")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("cuenta")
}

model VerificationToken {
  identifier String   @map("identificador")
  token      String   @map("token")
  expires    DateTime @map("expira_en")

  @@unique([identifier, token])
  @@map("verificacion")
}

model Movement {
  id        String   @id @default(uuid())
  amount    Decimal  @db.Decimal(18, 2) @map("monto")
  concept   String   @map("concepto")
  date      DateTime @map("fecha")
  userId    String   @map("usuario_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("creado_en")
  updatedAt DateTime @updatedAt @map("actualizado_en")

  @@map("movimiento")
}
